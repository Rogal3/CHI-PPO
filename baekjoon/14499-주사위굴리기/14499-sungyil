#include <iostream>
using namespace std;
void rolling(int direc);
void moving(int *roll, int dir);

int n, m;
int rcmap[21][21];
int moveK[1001] = { 0, };
int k;

int ry[4] = { 0, };
int rx[4] = { 0, };
int main() {
	int x, y;
	int move;
	cin >> n >> m >> y >> x >> k;
	
	for (int j = 0; j < n; ++j) {
		for (int h = 0; h < m; ++h) {
			cin >> rcmap[j][h];
		}
	}
	for (int i = 0; i < k; ++i) {
		scanf("%d", &move);

		switch (move) {//방넘어가면 출력x 
		case 1:
			x++;
			if (x >= m) {
				x--;
				moveK[i] = -1;
				continue;
			}
			break;
		case 2:
			x--;
			if (x <0) {
				x++;
				moveK[i] = -1;
				continue;
			}
			break;
		case 3:
			y--;
			if (y <0) {
				y++;
				moveK[i] = -1;
				continue;
			}
			break;
		case 4:
			y++;
			if (y >=n) {
				y--;
				moveK[i] = -1;
				continue;
			}
		}
		rolling(move);
		if (rcmap[y][x] == 0) {
			rcmap[y][x] = rx[1];
		}
		else {
			rx[1] = rcmap[y][x];
			ry[1] = rx[1];
			rcmap[y][x] = 0;
		}
		moveK[i] = rx[3];
	}

	for (int i = 0; i < k; ++i) {
		if (moveK[i] == -1)continue;
		printf("%d\n", moveK[i]);
	}
}
void rolling(int direc) {
	switch (direc) {
	case 1:
		moving(rx, 1);
		ry[1] = rx[1];
		ry[3] = rx[3];
		break;
	case 2:
		moving(rx, -1);
		ry[1] = rx[1];
		ry[3] = rx[3];
		break;
	case 3:
		moving(ry, -1);
		rx[1] = ry[1];
		rx[3] = ry[3];
		break;
	case 4:
		moving(ry, 1);
		rx[1] = ry[1];
		rx[3] = ry[3];
	}
}
void moving(int *roll, int dir) {
	int temp;
	int i, size;
	if (dir == 1) {
		temp = roll[0];
		for (i = 0; i < 3; ++i) {
			roll[i] = roll[i + 1];
		}
		roll[3] = temp;
	}
	else {
		temp = roll[3];
		for (i = 3; i > 0; --i) {
			roll[i] = roll[i - 1];
		}
		roll[0] = temp;
	}
}
